<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Junior's Blog]]></title>
  <subtitle><![CDATA[哪里跑，biubiubiu]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhuping.github.io/"/>
  <updated>2014-12-22T09:44:54.134Z</updated>
  <id>http://zhuping.github.io/</id>
  
  <author>
    <name><![CDATA[Junior Zhu]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[thunkify 和 thunkify-wrap 的源码学习]]></title>
    <link href="http://zhuping.github.io/2014/12/17/thunkify-and-thunkify-wrap-souce-code-learning/"/>
    <id>http://zhuping.github.io/2014/12/17/thunkify-and-thunkify-wrap-souce-code-learning/</id>
    <published>2014-12-17T03:42:08.000Z</published>
    <updated>2014-12-22T09:43:01.000Z</updated>
    <content type="html"><![CDATA[<p>最近一直都在看些源码，源码学习不仅能提高自身的代码阅读能力，还能学习优秀框架的设置思路，所以多多益善啊！今天要介绍的是 <a href="https://github.com/tj/node-thunkify" target="_blank" rel="external">thunkify</a> 和 <a href="https://github.com/node-modules/thunkify-wrap" target="_blank" rel="external">thunkify-wrap</a> 框架，前者是大神TJ开发的，后者是国内Node社区的活跃贡献者dead-horse开发的。本文主要是作为笔者学习的一个记录，如果有表达不准确或者错误的地方，还望指出。</p>
<a id="more"></a>

<h2 id="thunkify介绍">thunkify介绍</h2>
<p>在介绍前我们先来看个栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">(file, cb)</span> </span>{</div><div class="line">    fs.readFile(file, cb);</div><div class="line">}</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span><span class="params">(err, content)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(content);</div><div class="line">}</div><div class="line">read(<span class="string">'package.json'</span>, cb);</div></pre></td></tr></table></figure>

<p>read是一个异步读取文件的函数，cb为读取完后的回调函数，很普通也很常见。那么，我们来把read改造下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">(file)</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(cb)</span> </span>{</div><div class="line">        fs.readFile(file, cb);</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span><span class="params">(err, content)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(content);</div><div class="line">}</div><div class="line">read(<span class="string">'package.json'</span>)(cb);</div></pre></td></tr></table></figure>

<p>改造后的read返回一个函数，且只有一个参数，回调函数成了返回函数的参数。<br>thunkify的功能就是把一个普通的函数改造成一个<code>thunk[θʌŋk]</code>函数。在这里，read就是一个thunk函数。那么，thunkify到底有什么用处呢？</p>
<h2 id="thunkify实战">thunkify实战</h2>
<p>thunkify的真正价值，是结合 <a href="https://github.com/tj/co" target="_blank" rel="external">co</a> 框架才能体现出来（其实co本身也是一个thunk函数），现在正流行的 <a href="https://github.com/koajs/koa" target="_blank" rel="external">koa</a> 框架就是基于co框架开发的。我们看一段结合co框架的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> thunkify = <span class="built_in">require</span>(<span class="string">'thunkify'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</div><div class="line"><span class="keyword">var</span> readFile = thunkify(fs.readFile);</div><div class="line"></div><div class="line">co(<span class="function"><span class="keyword">function</span>* <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">yield</span> readFile(<span class="string">'package.json'</span>);</div><div class="line">})(<span class="function"><span class="keyword">function</span><span class="params">(err, content)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(content);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>在<code>yield</code>后面返回了一个改造后的<code>readFile</code>函数，在这里还未真正执行这个异步函数，那么到底是在哪里调用的呢？先别急，我们来看看co内部到底是怎么实现的，下面是一个简易的co框架(<a href="http://bg.biedalian.com/2013/12/21/harmony-generator.html" target="_blank" rel="external">实现原理详解</a>)：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span><span class="params">(GenFunc)</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(cb)</span> </span>{</div><div class="line">        <span class="keyword">var</span> gen = GenFunc();</div><div class="line">        next();</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">(err, args)</span> </span>{</div><div class="line">            <span class="keyword">if</span> (err) {</div><div class="line">                cb(err);</div><div class="line">            } <span class="keyword">else</span> {</div><div class="line">                <span class="keyword">if</span> (gen.next) {</div><div class="line">                    <span class="keyword">var</span> ret = gen.next(args);</div><div class="line">                    <span class="keyword">if</span> (ret.done) {</div><div class="line">                        cb && cb(<span class="literal">null</span>, args);</div><div class="line">                    } <span class="keyword">else</span> {</div><div class="line">                        ret.value(next);</div><div class="line">                    }</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>请注意第14行代码<code>ret.value(next)</code>,这是co框架的核心所在。上文中readFile函数也在这里得到了调用。因为这里<code>ret.value</code>的值就是readFile这个thunk函数，co中的<code>next</code>函数也通过参数传递得以继续执行。再次调用<code>next</code>方法时，<code>args</code>已经是<code>package.josn</code>的内容了。我们继续往下执行，通过<code>gen.next(args)</code>，把读取到的内容赋值给外面的<code>data</code>变量。此时<code>ret.done</code>的值为<code>true</code>，因为没有<code>yield</code>了，那么执行回调函数<code>cb</code>。我们前面已经说过，co本身也是一个<code>thunk</code>函数，所以这里的<code>cb</code>就是<code>function(err, content) {console.log(content);}</code>，<code>package.josn</code>的内容最终也在这里得到了输出。是不是觉得很奇妙，这就是thunk函数的魅力所在。<br>在阅读thunkify源码的时候，其中有个<code>called</code>变量产生了些疑惑，不过后来也在<a href="http://segmentfault.com/q/1010000000524121" target="_blank" rel="external">这里</a>找到了解释。为了防止多次调用<code>ret.value</code>而造成错误，做了不得已的取舍。</p>
<h2 id="thunkify-wrap介绍">thunkify-wrap介绍</h2>
<p>thunkify-wrap框架是对thunkify的一个扩展。在原有基础上：</p>
<ol>
<li>增加了多个函数封装成thunk函数</li>
<li>把函数封装成一个GeneratorFunction函数</li>
<li>增加事件支持</li>
<li>允许传递上下文<code>(ctx)</code></li>
</ol>
<p>对多个函数的封装：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> thunkify = <span class="built_in">require</span>(<span class="string">'thunkify-wrap'</span>);</div><div class="line"><span class="keyword">var</span> user = {</div><div class="line">    add: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{},</div><div class="line">    show: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{},</div><div class="line">    list: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line">};</div><div class="line"><span class="built_in">module</span>.exports = thunkify(user);</div><div class="line"><span class="comment">// module.exports = thunkify(user, ['add', 'show']);</span></div><div class="line"><span class="comment">// module.exports = thunkify(user, 'add');</span></div></pre></td></tr></table></figure>

<p>传递user对象，内部通过使用for循环，使对象中的每一个函数经过<code>thunkify</code>函数包装成为一个<code>thunk</code>函数。后两句指对其中<code>add</code>和<code>show</code>进行处理和只对<code>add</code>进行处理。<br>在介绍如何封装成一个GeneratorFunction函数之前，我们先来了解下generator中一个重要的概念，代理(<code>delegating yield</code>)。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">yield</span>* gen2();</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">    <span class="keyword">yield</span> <span class="number">6</span>;</div><div class="line">}</div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen2</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'start'</span>);</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">'over'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</div><div class="line">}</div><div class="line"><span class="keyword">var</span> g = gen();</div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// { value: 1, done: false }</span></div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// { value: 2, done: false }</span></div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// start { value: 3, done: false }</span></div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// { value: 4, done: false }</span></div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// over { value: 6, done: false }</span></div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// {value: undefined, done: true}</span></div></pre></td></tr></table></figure>

<p>在执行到第三个<code>next</code>的时候，直接输出了<code>start</code>并且在<code>yield 3</code>处暂停了。等到<code>gen2</code>中的<code>return</code>返回，再继续执行<code>gen1</code>中余下的<code>yield</code>。<br>我们通过一个栗子来看下thunkify-wrap是怎么结合co框架来执行一个GeneratorFunction的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> genify = <span class="built_in">require</span>(<span class="string">'thunkify-wrap'</span>).genify;</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> readFile = genify(fs.readFile);</div><div class="line">co(<span class="function"><span class="keyword">function</span>* <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">yield</span>* readFile(<span class="string">'package.json'</span>, <span class="string">'utf8'</span>);</div><div class="line">})(<span class="function"><span class="keyword">function</span><span class="params">(err, content)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(content);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>注意第5行代码，<code>fs.readFile</code>经过<code>genify</code>的处理后，此时已经是一个GeneratorFunction，因为在thunkify-wrap内部，判断如果传入的<code>fn</code>已经是GeneratorFunction了，直接返回，如果不是，则返回一个GeneratorFunction。详见代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">genify</span><span class="params">(fn, ctx)</span> </span>{</div><div class="line">    <span class="keyword">if</span> (isGeneratorFunction(fn)) {</div><div class="line">        <span class="keyword">return</span> fn;</div><div class="line">    }</div><div class="line">    <span class="function"><span class="keyword">function</span>* <span class="title">genify</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> thunk = thunkify(fn);</div><div class="line">        <span class="keyword">var</span> data = <span class="keyword">yield</span> thunk.apply(ctx || <span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> genify;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>所以上面的代码可以改为类似这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> readFile = (<span class="function"><span class="keyword">function</span>* <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> thunk = thunkify(fn);</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">yield</span> thunk.apply(ctx || <span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">});</div><div class="line">co(<span class="function"><span class="keyword">function</span>* <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">yield</span>* readFile(<span class="string">'package.json'</span>, <span class="string">'utf8'</span>);</div><div class="line">})(<span class="function"><span class="keyword">function</span><span class="params">(err, content)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(content);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>是不是觉得和上面的<code>delegating yield</code>的栗子差不多了。在co中的<code>var ret = gen.next(args)</code>第一次调用时，程序通过代理在<code>readFile</code>中的<code>yield</code>处暂停，此时<code>ret.value</code>的值为<code>fs.readFile</code>函数。注意此时的<code>fs.readFile</code>已经通过<code>thunkify</code>处理成一个thunk函数了，执行<code>ret.value(next)</code>语句进行<code>fs.readFile</code>的调用，co中的<code>next</code>方法通过回调函数的形式再次被调用，而此时的<code>args</code>已经是<code>package.json</code>的内容了。第二次执行<code>gen.next(args)</code>时把文件内容赋值给外部<code>readFile</code>中的变量<code>data</code>,通过<code>return</code>返回到第一个GeneratorFunction中。因为没有<code>yield</code>了，所以co中<code>ret.done</code>的值为<code>true</code>，直接调用回调函数输出文件内容。</p>
<h2 id="小结">小结</h2>
<p>thunkify和thunkify-wrap框架是co框架的基石，也是koa框架的重要组成部分，所以先了解他们的实现对后面学习koa还是很有帮助的。起初学习的时候，代码看的会有些晕，但了解了他在co中的实现后，就能更好的理解他为什么要设计成这样。恩，that’s all.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近一直都在看些源码，源码学习不仅能提高自身的代码阅读能力，还能学习优秀框架的设置思路，所以多多益善啊！今天要介绍的是 <a href="https://github.com/tj/node-thunkify" target="_blank" rel="external">thunkify</a> 和 <a href="https://github.com/node-modules/thunkify-wrap" target="_blank" rel="external">thunkify-wrap</a> 框架，前者是大神TJ开发的，后者是国内Node社区的活跃贡献者dead-horse开发的。本文主要是作为笔者学习的一个记录，如果有表达不准确或者错误的地方，还望指出。</p>
]]>
    
    </summary>
    
      <category term="thunkify" scheme="http://zhuping.github.io/tags/thunkify/"/>
    
      <category term="源码" scheme="http://zhuping.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
