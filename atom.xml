<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Junior's Blog]]></title>
  <subtitle><![CDATA[哪里跑，biubiubiu]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhuping.github.io/"/>
  <updated>2014-12-19T07:29:20.443Z</updated>
  <id>http://zhuping.github.io/</id>
  
  <author>
    <name><![CDATA[Junior Zhu]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[thunkify 和 thunkify-wrap 的源码学习]]></title>
    <link href="http://zhuping.github.io/2014/12/17/thunkify-and-thunkify-wrap-souce-code-learning/"/>
    <id>http://zhuping.github.io/2014/12/17/thunkify-and-thunkify-wrap-souce-code-learning/</id>
    <published>2014-12-17T03:42:08.000Z</published>
    <updated>2014-12-19T06:18:25.000Z</updated>
    <content type="html"><![CDATA[<p>最近一直都在看些源码，源码学习不仅能提高自身的代码阅读能力，还能学习优秀框架的设置思路，所以多多益善啊！今天要介绍的是 <a href="https://github.com/tj/node-thunkify" target="_blank" rel="external">thunkify</a> 和 <a href="https://github.com/node-modules/thunkify-wrap" target="_blank" rel="external">thunkify-wrap</a> 框架，前者是大神TJ开发的，后者是国内Node社区的活跃贡献者dead-horse开发的。本文主要是作为笔者学习的一个记录，如果有表达不准确或者错误的地方，还望指出。</p>
<a id="more"></a>

<h2 id="thunkify介绍">thunkify介绍</h2>
<p>在介绍前我们先来看个栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">(file, cb)</span> </span>{</div><div class="line">    fs.readFile(file, cb);</div><div class="line">}</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span><span class="params">(err, str)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(str);</div><div class="line">}</div><div class="line">read(<span class="string">'package.json'</span>, cb);</div></pre></td></tr></table></figure>

<p>read是一个异步读取文件的函数，cb为读取完后的回调函数，很普通也很常见。那么，我们来把read改造下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">(file)</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(cb)</span> </span>{</div><div class="line">        fs.readFile(file, cb);</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span><span class="params">(err, str)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(str);</div><div class="line">}</div><div class="line">read(<span class="string">'package.json'</span>)(cb);</div></pre></td></tr></table></figure>

<p>改造后的read返回一个函数，且只有一个参数，回调函数成了返回函数的参数。<br>thunkify的功能就是把一个普通的函数改造成一个<code>thunk[θʌŋk]</code>函数。在这里，read就是一个thunk函数。那么，thunkify到底有什么用处呢？</p>
<h2 id="thunkify实战">thunkify实战</h2>
<p>thunkify的真正价值，是结合 <a href="https://github.com/tj/co" target="_blank" rel="external">co</a> 框架才能体现出来（其实co本身也是一个thunk函数），现在正流行的 <a href="https://github.com/koajs/koa" target="_blank" rel="external">koa</a> 框架就是基于co框架开发的。我们看一段结合co框架的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> thunkify = <span class="built_in">require</span>(<span class="string">'thunkify'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</div><div class="line"><span class="keyword">var</span> readFile = thunkify(fs.readFile);</div><div class="line"></div><div class="line">co(<span class="function"><span class="keyword">function</span>* <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> str = <span class="keyword">yield</span> readFile(<span class="string">'package.json'</span>);</div><div class="line">})(<span class="function"><span class="keyword">function</span><span class="params">(err, str)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(str);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>在<code>yield</code>后面返回了一个改造后的<code>readFile</code>函数，在这里还未真正执行这个异步函数，那么到底是在哪里调用的呢？先别急，我们来看看co内部到底是怎么实现的，下面是一个简易的co框架(<a href="http://bg.biedalian.com/2013/12/21/harmony-generator.html" target="_blank" rel="external">实现原理详解</a>)：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span><span class="params">(GenFunc)</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(cb)</span> </span>{</div><div class="line">        <span class="keyword">var</span> gen = GenFunc();</div><div class="line">        next();</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">(err, args)</span> </span>{</div><div class="line">            <span class="keyword">if</span> (err) {</div><div class="line">                cb(err);</div><div class="line">            } <span class="keyword">else</span> {</div><div class="line">                <span class="keyword">if</span> (gen.next) {</div><div class="line">                    <span class="keyword">var</span> ret = gen.next(args);</div><div class="line">                    <span class="keyword">if</span> (ret.done) {</div><div class="line">                        cb && cb(<span class="literal">null</span>, args);</div><div class="line">                    } <span class="keyword">else</span> {</div><div class="line">                        ret.value(next);</div><div class="line">                    }</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>请注意第14行代码<code>ret.value(next)</code>,这是co框架的核心所在。上文中readFile函数也在这里得到了调用。因为这里<code>ret.value</code>的值就是readFile这个thunk函数，co中的<code>next</code>函数也通过参数传递得以继续执行。再次调用<code>next</code>方法时，<code>args</code>已经是<code>package.josn</code>的内容了。我们继续往下执行，通过<code>gen.next(args)</code>，把读取到的内容赋值给外面的<code>str</code>变量。此时<code>ret.done</code>的值为<code>true</code>，因为没有<code>yield</code>了，那么执行回调函数<code>cb</code>。我们前面已经说过，co本身也是一个<code>thunk</code>函数，所以这里的<code>cb</code>就是<code>function(err, str) {console.log(str);}</code>，<code>package.josn</code>的内容最终也在这里得到了输出。是不是觉得很奇妙，这就是thunk函数的魅力所在。<br>在阅读thunkify源码的时候，其中有个<code>called</code>变量产生了些疑惑，不过后来也在<a href="http://segmentfault.com/q/1010000000524121" target="_blank" rel="external">这里</a>找到了解释。为了防止多次调用<code>ret.value</code>而造成错误，做了不得已的取舍。</p>
<h2 id="thunkify-wrap介绍">thunkify-wrap介绍</h2>
<p>thunkify-wrap框架是对thunkify的一个扩展。<br>continue…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近一直都在看些源码，源码学习不仅能提高自身的代码阅读能力，还能学习优秀框架的设置思路，所以多多益善啊！今天要介绍的是 <a href="https://github.com/tj/node-thunkify" target="_blank" rel="external">thunkify</a> 和 <a href="https://github.com/node-modules/thunkify-wrap" target="_blank" rel="external">thunkify-wrap</a> 框架，前者是大神TJ开发的，后者是国内Node社区的活跃贡献者dead-horse开发的。本文主要是作为笔者学习的一个记录，如果有表达不准确或者错误的地方，还望指出。</p>
]]>
    
    </summary>
    
      <category term="thunkify" scheme="http://zhuping.github.io/tags/thunkify/"/>
    
      <category term="源码" scheme="http://zhuping.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
