<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Junior's Blog]]></title>
  <subtitle><![CDATA[哪里跑，biubiubiu]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhuping.github.io/"/>
  <updated>2015-02-27T15:59:01.226Z</updated>
  <id>http://zhuping.github.io/</id>
  
  <author>
    <name><![CDATA[Junior Zhu]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[koa和connect框架中间件的调用实现分析]]></title>
    <link href="http://zhuping.github.io/2015/02/27/what-is-the-different-about-use-middleware-between-koa-and-connect/"/>
    <id>http://zhuping.github.io/2015/02/27/what-is-the-different-about-use-middleware-between-koa-and-connect/</id>
    <published>2015-02-27T09:32:22.000Z</published>
    <updated>2015-02-27T15:58:28.000Z</updated>
    <content type="html"><![CDATA[<p>node的兴起，随之产生的各类框架也如雨后春笋般的出现。现在主流的各类node框架，主要包括koa、express、iojs等。这些框架得以应用广泛，也离不开丰富的中间件资源。一般做一个项目，我们都需要use很多的中间件进来。那么这些框架，它内部是怎样来执行这些中间件的呢？今天我们就通过对 koa 和 connect 的源码分析来一探究竟。</p>
<a id="more"></a>


<h3 id="Connect实现分析">Connect实现分析</h3>
<p>我们先来看个hello world的栗子，connect到底是怎么使用的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">'connect'</span>);</div><div class="line"><span class="keyword">var</span> app = connect();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logger</span><span class="params">(req, res, next)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'%s %s'</span>, req.method, req.url);</div><div class="line">    next();</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">(req, res)</span> </span>{</div><div class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</div><div class="line">    res.end(<span class="string">'hello world.'</span>);</div><div class="line">}</div><div class="line"></div><div class="line">app.use(logger)</div><div class="line">    .use(hello);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'server running on 3000.'</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>这个栗子中有两个中间件，分别是<code>logger</code>和<code>hello</code>，并通过<code>use</code>方法逐个加载进去。你可能已经注意到，两个中间件函数参数个数不一样，<code>logger</code>多了一个<code>next</code>参数，在输出完日志后执行了这个函数。那么我们来看下在connect内部到底是怎么实现中间件逐个执行的，这个<code>next</code>到底是个什么。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">app.use = <span class="function"><span class="keyword">function</span><span class="params">(route, fn)</span> </span>{</div><div class="line">    <span class="comment">//some code</span></div><div class="line">    <span class="keyword">this</span>.stack.push({ route: route, handle: fn });</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这段代码是<code>use</code>方法的实现，我们每添加一个中间件，<code>use</code>都会把它塞到一个事先定义好的空数组中<code>app.stack = [];</code>。接下来我们看下，它是怎么实现持续调用这个数组中的中间件的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">app.handle = <span class="function"><span class="keyword">function</span><span class="params">(req, res, out)</span> </span>{</div><div class="line">    <span class="comment">//some code</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">(err)</span> </span>{</div><div class="line">        <span class="comment">// next callback</span></div><div class="line">        <span class="keyword">var</span> layer = stack[index++];</div><div class="line">        <span class="comment">// all done</span></div><div class="line">        <span class="keyword">if</span> (!layer) {</div><div class="line">            defer(done, err);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        }</div><div class="line">        <span class="comment">// call the layer handle</span></div><div class="line">        call(layer.handle, route, err, req, res, next);</div><div class="line">    }</div><div class="line">    next();</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span><span class="params">(handle, route, err, req, res, next)</span> </span>{</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        handle(req, res, next);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    } <span class="keyword">catch</span> (e) {</div><div class="line">        err = e;</div><div class="line">    }</div><div class="line">    next(err);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在<code>handle</code>内部有个<code>next</code>方法，首先是从<code>stack</code>数组中逐个取出中间件，由上面的栗子可知现在这个<code>layer.handle</code>就是<code>logger</code>函数。关键是看第12行的代码，在调用<code>call</code>方法的时候，把当前的<code>next</code>方法作为参数递归地传递了下去。在<code>call</code>方法内部执行了<code>logger</code>函数，由我们上面的<code>logger</code>中间件实现可知，我们在<code>logger</code>内部调用了<code>next</code>方法。这样我们就可以继续执行下一个中间件。同理，下一个取到的是<code>hello</code>中间件，因为在<code>hello</code>内部没有做<code>next</code>的传递，所以也就不会再执行下去了。<br>由上所得，一个是中间件的调用顺序和它<code>use</code>的顺序一致；还有就是要想能够持续触发中间件，前面的中间件必须手动执行<code>next</code>方法。接下来我们来看看koa又是怎么实现的呢？</p>
<h3 id="Koa实现分析">Koa实现分析</h3>
<p>我们还是用上面那个栗子，现在把它改成koa的实现方式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</div><div class="line"><span class="keyword">var</span> app = koa();</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span> *<span class="params">(next)</span> </span>{</div><div class="line">    <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">    <span class="keyword">yield</span> next;</div><div class="line">    <span class="keyword">var</span> ms = <span class="keyword">new</span> <span class="built_in">Date</span> - start;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'%s %s - %s'</span>, <span class="keyword">this</span>.method, <span class="keyword">this</span>.url, ms);</div><div class="line">});</div><div class="line"></div><div class="line">app.use(<span class="function"><span class="keyword">function</span> *<span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.body = <span class="string">'Hello World'</span>;</div><div class="line">});</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'server running on 3000.'</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>同样也是<code>use</code>了两个中间件，不同的是这里不再是普通的<code>Function</code>了，而必须是<code>generatorFunction</code>。和上面栗子一样，第一个中间件也有一个<code>next</code>参数，第二个没有。接下来我们来看下koa中<code>use</code>都做了些什么呢？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.use = <span class="function"><span class="keyword">function</span><span class="params">(fn)</span> </span>{</div><div class="line">    <span class="comment">//some code</span></div><div class="line">    <span class="keyword">this</span>.middleware.push(fn);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>和connect的实现一样，都是把中间件塞到一个事先定义好的空数组中<code>this.middleware = [];</code>。当我们调用<code>listen</code>方法的时候，开始了我们的处理，我们直接来看<code>app.callback</code>的实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.callback = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> mw = [respond].concat(<span class="keyword">this</span>.middleware);</div><div class="line">    <span class="keyword">var</span> gen = compose(mw);</div><div class="line">    <span class="keyword">var</span> fn = co.wrap(gen);</div><div class="line">    </div><div class="line">    <span class="comment">//other code</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>先是把<code>respond</code>塞到数组队列的最前面，这里<code>respond</code>也是一个<code>generatorFunction</code>。关键是这个<code>compose</code>到底是做了什么呢，其实这个函数才是这里的重点，我们来看下它的源码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span><span class="params">(middleware)</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> *<span class="params">(next)</span> </span>{</div><div class="line">        <span class="keyword">var</span> i = middleware.length;</div><div class="line">        <span class="keyword">var</span> prev = next || noop();</div><div class="line">        <span class="keyword">var</span> curr;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (i--) {</div><div class="line">            curr = middleware[i];</div><div class="line">            prev = curr.call(<span class="keyword">this</span>, prev);</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">yield</span> *prev;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">noop</span><span class="params">()</span> </span>{}</div></pre></td></tr></table></figure>

<p>我们知道<code>middleware</code>是一个中间件的数组队列，而每一个中间件都是一个<code>generatorFunction</code>。首先<code>prev</code>初始为一个空的<code>generator</code>对象，在<code>while</code>循环中，从最后一个中间件开始调用，并把这个空的<code>generator</code>对象做参数传进去，同时把最后一个中间件的<code>generator</code>对象赋值给<code>prev</code>。作<code>i--</code>执行倒数第二个中间件，注意这时把倒数第一个的<code>generator</code>对象传递给了倒数第二个<code>generatorFunction</code>。并且<code>prev</code>被重新赋值为倒数第二个中间件的<code>generator</code>对象。以此递推，到最后这个<code>prev</code>的值为这个<code>middleware</code>数组排在第一个中间件的<code>generator</code>对象。也就是我们上面提到的<code>respond</code>的<code>generator</code>对象。循环完成后，执行<code>yield *prev</code>，这个是代理<code>delegating yield</code>，执行到<code>respond</code>内部，在<code>respond</code>头部，我们看到又是一个代理<code>yield *next;</code>。这里的<code>next</code>是什么呢？前面我们说过，在作<code>while</code>循环的时候，后面一个中间件的<code>generator</code>对象会被传递到前一个<code>genderatorFunction</code>里来，所以这里的<code>next</code>就是<code>respond</code>后面一个中间件的<code>generator</code>对象，这样才能持续的执行下去。所以，我们添加的中间件内部，都要加上<code>yield *next</code>这一句，这样才能一直执行下去。</p>
<h3 id="小结">小结</h3>
<p>通过 connect 和 koa 的分析得知，要想持续执行所有的中间件，都需要我们自己手动调用<code>next</code>方法，connect中使用<code>next()</code>，koa中使用<code>yield *next</code>。我们把需要手工调用才能持续执行后续调用的方法，叫做尾触发。详情可以查看《深入浅出Nodejs》一书的第四章。可能刚接触的时候觉得很绕，但当真正理解里面的实现原理后，才能体会到它的魅力所在，鹅妹子婴！！！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>node的兴起，随之产生的各类框架也如雨后春笋般的出现。现在主流的各类node框架，主要包括koa、express、iojs等。这些框架得以应用广泛，也离不开丰富的中间件资源。一般做一个项目，我们都需要use很多的中间件进来。那么这些框架，它内部是怎样来执行这些中间件的呢？今天我们就通过对 koa 和 connect 的源码分析来一探究竟。</p>
]]>
    
    </summary>
    
      <category term="javascript" scheme="http://zhuping.github.io/tags/javascript/"/>
    
      <category term="源码" scheme="http://zhuping.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OSX下配置apache服务器]]></title>
    <link href="http://zhuping.github.io/2015/01/20/configure-apache-in-osx/"/>
    <id>http://zhuping.github.io/2015/01/20/configure-apache-in-osx/</id>
    <published>2015-01-20T08:55:20.000Z</published>
    <updated>2015-01-20T09:24:57.000Z</updated>
    <content type="html"><![CDATA[<p>新领了Mac工作，所有很多环境都需要重新配置，配置方法和windows下又不一样，所以记录下apache的配置方法，以备后面重装系统什么的又要网上找。<br>环境：OSX Yosemite 10.10.1</p>
<p><a id="more"></a></p>
<h2 id="基本操作">基本操作</h2>
<p>因为OSX已经自带了apache服务，所有不需要自己再去下载安装。可以通过以下命令对apache进行操作：</p>
<ol>
<li>查看apache版本：<code>httpd -v</code></li>
<li>启动服务：<code>sudo apachectl start</code></li>
<li>重启服务：<code>sudo apachectl restart</code></li>
<li>停止服务：<code>sudo apachectl stop</code><br>启动后，浏览器打开localhost可以看到It works!的页面。</li>
</ol>
<h2 id="设置虚拟主机">设置虚拟主机</h2>
<p>apache默认的目录在<code>/Library/WebServer/Documents/</code>，藏的比较深，也不易平时的开发。</p>
<ul>
<li>修改自定义目录，执行<code>sudo vi /etc/apache2/httpd.conf</code>：</li>
</ul>
<figure class="highlight conf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DocumentRoot <span class="string">"/Users/zhuping/project/"</span></div><div class="line">&lt;Directory <span class="string">"/Users/zhuping/project/"</span>&gt;</div><div class="line"><span class="keyword">...</span></div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>

<p>其中<code>/Users/zhuping/project/</code>为自定义目录。</p>
<ul>
<li>去除不必要的设置：执行<code>sudo vi /etc/apache2/httpd.conf</code>去掉如下行前面的<code>＃</code> :</li>
</ul>
<figure class="highlight conf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#LoadModule php5_module libexec/apache2/libphp5.so</span></div><div class="line"><span class="preprocessor">#LoadModule userdir_module libexec/apache2/mod_userdir.so</span></div><div class="line"><span class="preprocessor">#Include /private/etc/apache2/extra/httpd-userdir.conf</span></div><div class="line"><span class="preprocessor">#LoadModule authz_core_module libexec/apache2/mod_authz_core.so</span></div><div class="line"><span class="preprocessor">#LoadModule authz_host_module libexec/apache2/mod_authz_host.so</span></div></pre></td></tr></table></figure>

<ul>
<li>执行<code>sudo vi /etc/apache2/extra/httpd-userdir.conf</code>去掉如下行前面的<code>#</code>:</li>
</ul>
<figure class="highlight conf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Include</span> <span class="regexp">/private/</span>etc<span class="regexp">/apache2/</span>users<span class="comment">/*.conf</span></div></pre></td></tr></table></figure>

<ul>
<li>执行<code>cd /etc/apache2/users/</code> <code>touch zhuping.conf</code>创建一个新文件，添加如下内容：</li>
</ul>
<figure class="highlight conf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">Directory</span> <span class="string">"/Users/zhuping/project/"</span>&gt;</div><div class="line">    <span class="keyword">Options</span> Indexes MultiViews</div><div class="line">    AllowOverride <span class="keyword">None</span></div><div class="line">    Require all granted</div><div class="line">&lt;/<span class="keyword">Directory</span>&gt;</div></pre></td></tr></table></figure>

<ul>
<li>修改端口号 <code>sudo vi /etc/apache2/httpd.conf</code></li>
</ul>
<figure class="highlight conf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Listen</span> <span class="number">80</span></div></pre></td></tr></table></figure>

<ul>
<li>查看log日志 <code>cat /private/var/log/apache2/sites-error_log</code></li>
</ul>
<h2 id="小结">小结</h2>
<p>好记性不如烂笔头~&gt;_&lt;~ </p>
<blockquote>
<p>参考：<a href="http://blog.csdn.net/wyodyia/article/details/40393533" target="_blank" rel="external">http://blog.csdn.net/wyodyia/article/details/40393533</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>新领了Mac工作，所有很多环境都需要重新配置，配置方法和windows下又不一样，所以记录下apache的配置方法，以备后面重装系统什么的又要网上找。<br>环境：OSX Yosemite 10.10.1</p>
<p>]]>
    
    </summary>
    
      <category term="osx" scheme="http://zhuping.github.io/tags/osx/"/>
    
      <category term="apache" scheme="http://zhuping.github.io/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[thunkify 和 thunkify-wrap 的源码学习]]></title>
    <link href="http://zhuping.github.io/2014/12/17/thunkify-and-thunkify-wrap-souce-code-learning/"/>
    <id>http://zhuping.github.io/2014/12/17/thunkify-and-thunkify-wrap-souce-code-learning/</id>
    <published>2014-12-17T03:42:08.000Z</published>
    <updated>2015-01-27T07:01:14.000Z</updated>
    <content type="html"><![CDATA[<p>最近一直都在看些源码，源码学习不仅能提高自身的代码阅读能力，还能学习优秀框架的设置思路，所以多多益善啊！今天要介绍的是 <a href="https://github.com/tj/node-thunkify" target="_blank" rel="external">thunkify</a> 和 <a href="https://github.com/node-modules/thunkify-wrap" target="_blank" rel="external">thunkify-wrap</a> 框架，前者是大神TJ开发的，后者是国内Node社区的活跃贡献者dead-horse开发的。本文主要是作为笔者学习的一个记录，如果有表达不准确或者错误的地方，还望指出。</p>
<a id="more"></a>

<h2 id="thunkify介绍">thunkify介绍</h2>
<p>在介绍前我们先来看个栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">(file, cb)</span> </span>{</div><div class="line">    fs.readFile(file, cb);</div><div class="line">}</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span><span class="params">(err, content)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(content);</div><div class="line">}</div><div class="line">read(<span class="string">'package.json'</span>, cb);</div></pre></td></tr></table></figure>

<p>read是一个异步读取文件的函数，cb为读取完后的回调函数，很普通也很常见。那么，我们来把read改造下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">(file)</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(cb)</span> </span>{</div><div class="line">        fs.readFile(file, cb);</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span><span class="params">(err, content)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(content);</div><div class="line">}</div><div class="line">read(<span class="string">'package.json'</span>)(cb);</div></pre></td></tr></table></figure>

<p>改造后的read返回一个函数，且只有一个参数，回调函数成了返回函数的参数。<br>thunkify的功能就是把一个普通的函数改造成一个<code>thunk[θʌŋk]</code>函数。在这里，read就是一个thunk函数。那么，thunkify到底有什么用处呢？</p>
<h2 id="thunkify实战">thunkify实战</h2>
<p>thunkify的真正价值，是结合 <a href="https://github.com/tj/co" target="_blank" rel="external">co</a> 框架才能体现出来（其实co本身也是一个thunk函数），现在正流行的 <a href="https://github.com/koajs/koa" target="_blank" rel="external">koa</a> 框架就是基于co框架开发的。我们看一段结合co框架的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> thunkify = <span class="built_in">require</span>(<span class="string">'thunkify'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</div><div class="line"><span class="keyword">var</span> readFile = thunkify(fs.readFile);</div><div class="line"></div><div class="line">co(<span class="function"><span class="keyword">function</span>* <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">yield</span> readFile(<span class="string">'package.json'</span>);</div><div class="line">})(<span class="function"><span class="keyword">function</span><span class="params">(err, content)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(content);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>在<code>yield</code>后面返回了一个改造后的<code>readFile</code>函数，在这里还未真正执行这个异步函数，那么到底是在哪里调用的呢？先别急，我们来看看co内部到底是怎么实现的，下面是一个简易的co框架(<a href="http://bg.biedalian.com/2013/12/21/harmony-generator.html" target="_blank" rel="external">实现原理详解</a>)：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span><span class="params">(GenFunc)</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(cb)</span> </span>{</div><div class="line">        <span class="keyword">var</span> gen = GenFunc();</div><div class="line">        next();</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">(err, args)</span> </span>{</div><div class="line">            <span class="keyword">if</span> (err) {</div><div class="line">                cb(err);</div><div class="line">            } <span class="keyword">else</span> {</div><div class="line">                <span class="keyword">if</span> (gen.next) {</div><div class="line">                    <span class="keyword">var</span> ret = gen.next(args);</div><div class="line">                    <span class="keyword">if</span> (ret.done) {</div><div class="line">                        cb && cb(<span class="literal">null</span>, args);</div><div class="line">                    } <span class="keyword">else</span> {</div><div class="line">                        ret.value(next);</div><div class="line">                    }</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>请注意第14行代码<code>ret.value(next)</code>,这是co框架的核心所在。上文中readFile函数也在这里得到了调用。因为这里<code>ret.value</code>的值就是readFile这个thunk函数，co中的<code>next</code>函数也通过参数传递得以继续执行。再次调用<code>next</code>方法时，<code>args</code>已经是<code>package.josn</code>的内容了。我们继续往下执行，通过<code>gen.next(args)</code>，把读取到的内容赋值给外面的<code>data</code>变量。此时<code>ret.done</code>的值为<code>true</code>，因为没有<code>yield</code>了，那么执行回调函数<code>cb</code>。我们前面已经说过，co本身也是一个<code>thunk</code>函数，所以这里的<code>cb</code>就是<code>function(err, content) {console.log(content);}</code>，<code>package.josn</code>的内容最终也在这里得到了输出。是不是觉得很奇妙，这就是thunk函数的魅力所在。<br>在阅读thunkify源码的时候，其中有个<code>called</code>变量产生了些疑惑，不过后来也在<a href="http://segmentfault.com/q/1010000000524121" target="_blank" rel="external">这里</a>找到了解释。为了防止多次调用<code>ret.value</code>而造成错误，做了不得已的取舍。</p>
<h2 id="thunkify-wrap介绍">thunkify-wrap介绍</h2>
<p>thunkify-wrap框架是对thunkify的一个扩展。在原有基础上：</p>
<ol>
<li>增加了多个函数封装成thunk函数</li>
<li>把函数封装成一个GeneratorFunction函数</li>
<li>增加事件支持</li>
<li>允许传递上下文<code>(ctx)</code></li>
</ol>
<p>对多个函数的封装：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> thunkify = <span class="built_in">require</span>(<span class="string">'thunkify-wrap'</span>);</div><div class="line"><span class="keyword">var</span> user = {</div><div class="line">    add: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{},</div><div class="line">    show: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{},</div><div class="line">    list: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{}</div><div class="line">};</div><div class="line"><span class="built_in">module</span>.exports = thunkify(user);</div><div class="line"><span class="comment">// module.exports = thunkify(user, ['add', 'show']);</span></div><div class="line"><span class="comment">// module.exports = thunkify(user, 'add');</span></div></pre></td></tr></table></figure>

<p>传递user对象，内部通过使用for循环，使对象中的每一个函数经过<code>thunkify</code>函数包装成为一个<code>thunk</code>函数。后两句指对其中<code>add</code>和<code>show</code>进行处理和只对<code>add</code>进行处理。<br>在介绍如何封装成一个GeneratorFunction函数之前，我们先来了解下generator中一个重要的概念，代理(<code>delegating yield</code>)。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">yield</span>* gen2();</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">    <span class="keyword">yield</span> <span class="number">6</span>;</div><div class="line">}</div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen2</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'start'</span>);</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">'over'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</div><div class="line">}</div><div class="line"><span class="keyword">var</span> g = gen();</div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// { value: 1, done: false }</span></div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// { value: 2, done: false }</span></div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// start { value: 3, done: false }</span></div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// { value: 4, done: false }</span></div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// over { value: 6, done: false }</span></div><div class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// {value: undefined, done: true}</span></div></pre></td></tr></table></figure>

<p>在执行到第三个<code>next</code>的时候，直接输出了<code>start</code>并且在<code>yield 3</code>处暂停了。等到<code>gen2</code>中的<code>return</code>返回，再继续执行<code>gen1</code>中余下的<code>yield</code>。<br>我们通过一个栗子来看下thunkify-wrap是怎么结合co框架来执行一个GeneratorFunction的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> genify = <span class="built_in">require</span>(<span class="string">'thunkify-wrap'</span>).genify;</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> readFile = genify(fs.readFile);</div><div class="line">co(<span class="function"><span class="keyword">function</span>* <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">yield</span>* readFile(<span class="string">'package.json'</span>, <span class="string">'utf8'</span>);</div><div class="line">})(<span class="function"><span class="keyword">function</span><span class="params">(err, content)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(content);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>注意第5行代码，<code>fs.readFile</code>经过<code>genify</code>的处理后，此时已经是一个GeneratorFunction，因为在thunkify-wrap内部，判断如果传入的<code>fn</code>已经是GeneratorFunction了，直接返回，如果不是，则返回一个GeneratorFunction。详见代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">genify</span><span class="params">(fn, ctx)</span> </span>{</div><div class="line">    <span class="keyword">if</span> (isGeneratorFunction(fn)) {</div><div class="line">        <span class="keyword">return</span> fn;</div><div class="line">    }</div><div class="line">    <span class="function"><span class="keyword">function</span>* <span class="title">genify</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> thunk = thunkify(fn);</div><div class="line">        <span class="keyword">var</span> data = <span class="keyword">yield</span> thunk.apply(ctx || <span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> genify;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>所以上面的代码可以改为类似这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> readFile = (<span class="function"><span class="keyword">function</span>* <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> thunk = thunkify(fn);</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">yield</span> thunk.apply(ctx || <span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">});</div><div class="line">co(<span class="function"><span class="keyword">function</span>* <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">yield</span>* readFile(<span class="string">'package.json'</span>, <span class="string">'utf8'</span>);</div><div class="line">})(<span class="function"><span class="keyword">function</span><span class="params">(err, content)</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(content);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>是不是觉得和上面的<code>delegating yield</code>的栗子差不多了。在co中的<code>var ret = gen.next(args)</code>第一次调用时，程序通过代理在<code>readFile</code>中的<code>yield</code>处暂停，此时<code>ret.value</code>的值为<code>fs.readFile</code>函数。注意此时的<code>fs.readFile</code>已经通过<code>thunkify</code>处理成一个thunk函数了，执行<code>ret.value(next)</code>语句进行<code>fs.readFile</code>的调用，co中的<code>next</code>方法通过回调函数的形式再次被调用，而此时的<code>args</code>已经是<code>package.json</code>的内容了。第二次执行<code>gen.next(args)</code>时把文件内容赋值给外部<code>readFile</code>中的变量<code>data</code>,通过<code>return</code>返回到第一个GeneratorFunction中。因为没有<code>yield</code>了，所以co中<code>ret.done</code>的值为<code>true</code>，直接调用回调函数输出文件内容。</p>
<h2 id="小结">小结</h2>
<p>thunkify和thunkify-wrap框架是co框架的基石，也是koa框架的重要组成部分，所以先了解他们的实现对后面学习koa还是很有帮助的。起初学习的时候，代码看的会有些晕，但了解了他在co中的实现后，就能更好的理解他为什么要设计成这样。恩，that’s all.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近一直都在看些源码，源码学习不仅能提高自身的代码阅读能力，还能学习优秀框架的设置思路，所以多多益善啊！今天要介绍的是 <a href="https://github.com/tj/node-thunkify" target="_blank" rel="external">thunkify</a> 和 <a href="https://github.com/node-modules/thunkify-wrap" target="_blank" rel="external">thunkify-wrap</a> 框架，前者是大神TJ开发的，后者是国内Node社区的活跃贡献者dead-horse开发的。本文主要是作为笔者学习的一个记录，如果有表达不准确或者错误的地方，还望指出。</p>
]]>
    
    </summary>
    
      <category term="javascript" scheme="http://zhuping.github.io/tags/javascript/"/>
    
      <category term="thunkify" scheme="http://zhuping.github.io/tags/thunkify/"/>
    
      <category term="源码" scheme="http://zhuping.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
